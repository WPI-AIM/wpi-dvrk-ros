#include "ros/ros.h"
#include "sensor_msgs/JointState.h"
#include <cstdlib>
#include <cstdlib>


int main(int argc, char **argv)
{
  	ros::init(argc, argv, "SetJointPositionsClient");

	ros::NodeHandle n("~");
	std::cout << "Name of the topic is : " << argv[1] <<std::endl ;
	ros::Publisher joint_state_publisher = n.advertise<sensor_msgs::JointState>(argv[1] , 1000);
	ros::Rate loop_rate(10);

	if( joint_state_publisher == NULL )
	{
	   ROS_ERROR("Unable to create Clinet Publisher object");

	}
	int count = 0;
	while (ros::ok())
  	{
	     	sensor_msgs::JointState joint_states_msg;

	  //define message values
		joint_states_msg.name.resize(3);
		joint_states_msg.position.resize(3);

		joint_states_msg.name[0] = "outer_yaw_joint";
		joint_states_msg.name[1] = "outer_pitch_base_joint";
		joint_states_msg.name[2] = "tool_insertion_joint";

		joint_states_msg.position[0] = (double)rand()/RAND_MAX;;
		joint_states_msg.position[1] = (double)rand()/RAND_MAX;;
		joint_states_msg.position[2] = (double)rand()/RAND_MAX;;

		std::cout << "Joint positions :" << joint_states_msg.position[0] << " , " <<joint_states_msg.position[1] << " , " <<joint_states_msg.position[2] << std::endl ;
		ROS_INFO("Publishing message......\n");

	    	joint_state_publisher.publish(joint_states_msg);

		ros::spinOnce();

		loop_rate.sleep();
		++count;
	}
	return 0;
}
